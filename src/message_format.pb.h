// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_format.proto

#ifndef PROTOBUF_message_5fformat_2eproto__INCLUDED
#define PROTOBUF_message_5fformat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace game {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_5fformat_2eproto();
void protobuf_AssignDesc_message_5fformat_2eproto();
void protobuf_ShutdownFile_message_5fformat_2eproto();

class Update;
class Update_Location;
class Update_UnitStats;
class Update_AnimationHints;
class Update_Unit;
class Update_Player;

enum Update_Unit_MessageType {
  Update_Unit_MessageType_CANONICAL_STATE = 0,
  Update_Unit_MessageType_SUMMON = 1,
  Update_Unit_MessageType_MOVE = 2,
  Update_Unit_MessageType_ATTACK = 3,
  Update_Unit_MessageType_SPELL = 4,
  Update_Unit_MessageType_PASS = 5
};
bool Update_Unit_MessageType_IsValid(int value);
const Update_Unit_MessageType Update_Unit_MessageType_MessageType_MIN = Update_Unit_MessageType_CANONICAL_STATE;
const Update_Unit_MessageType Update_Unit_MessageType_MessageType_MAX = Update_Unit_MessageType_PASS;
const int Update_Unit_MessageType_MessageType_ARRAYSIZE = Update_Unit_MessageType_MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Update_Unit_MessageType_descriptor();
inline const ::std::string& Update_Unit_MessageType_Name(Update_Unit_MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Update_Unit_MessageType_descriptor(), value);
}
inline bool Update_Unit_MessageType_Parse(
    const ::std::string& name, Update_Unit_MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Update_Unit_MessageType>(
    Update_Unit_MessageType_descriptor(), name, value);
}
enum Update_Player_Action {
  Update_Player_Action_CANONICAL_STATE = 0,
  Update_Player_Action_JOIN = 1,
  Update_Player_Action_QUIT = 2,
  Update_Player_Action_CONCEDE = 3
};
bool Update_Player_Action_IsValid(int value);
const Update_Player_Action Update_Player_Action_Action_MIN = Update_Player_Action_CANONICAL_STATE;
const Update_Player_Action Update_Player_Action_Action_MAX = Update_Player_Action_CONCEDE;
const int Update_Player_Action_Action_ARRAYSIZE = Update_Player_Action_Action_MAX + 1;

const ::google::protobuf::EnumDescriptor* Update_Player_Action_descriptor();
inline const ::std::string& Update_Player_Action_Name(Update_Player_Action value) {
  return ::google::protobuf::internal::NameOfEnum(
    Update_Player_Action_descriptor(), value);
}
inline bool Update_Player_Action_Parse(
    const ::std::string& name, Update_Player_Action* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Update_Player_Action>(
    Update_Player_Action_descriptor(), name, value);
}
enum Update_GameWinState {
  Update_GameWinState_IN_PROGRESS = 0,
  Update_GameWinState_WON = 1,
  Update_GameWinState_DRAW = 2
};
bool Update_GameWinState_IsValid(int value);
const Update_GameWinState Update_GameWinState_GameWinState_MIN = Update_GameWinState_IN_PROGRESS;
const Update_GameWinState Update_GameWinState_GameWinState_MAX = Update_GameWinState_DRAW;
const int Update_GameWinState_GameWinState_ARRAYSIZE = Update_GameWinState_GameWinState_MAX + 1;

const ::google::protobuf::EnumDescriptor* Update_GameWinState_descriptor();
inline const ::std::string& Update_GameWinState_Name(Update_GameWinState value) {
  return ::google::protobuf::internal::NameOfEnum(
    Update_GameWinState_descriptor(), value);
}
inline bool Update_GameWinState_Parse(
    const ::std::string& name, Update_GameWinState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Update_GameWinState>(
    Update_GameWinState_descriptor(), name, value);
}
// ===================================================================

class Update_Location : public ::google::protobuf::Message {
 public:
  Update_Location();
  virtual ~Update_Location();

  Update_Location(const Update_Location& from);

  inline Update_Location& operator=(const Update_Location& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Update_Location& default_instance();

  void Swap(Update_Location* other);

  // implements Message ----------------------------------------------

  Update_Location* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Update_Location& from);
  void MergeFrom(const Update_Location& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // required int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.Update.Location)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  friend void  protobuf_AddDesc_message_5fformat_2eproto();
  friend void protobuf_AssignDesc_message_5fformat_2eproto();
  friend void protobuf_ShutdownFile_message_5fformat_2eproto();

  void InitAsDefaultInstance();
  static Update_Location* default_instance_;
};
// -------------------------------------------------------------------

class Update_UnitStats : public ::google::protobuf::Message {
 public:
  Update_UnitStats();
  virtual ~Update_UnitStats();

  Update_UnitStats(const Update_UnitStats& from);

  inline Update_UnitStats& operator=(const Update_UnitStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Update_UnitStats& default_instance();

  void Swap(Update_UnitStats* other);

  // implements Message ----------------------------------------------

  Update_UnitStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Update_UnitStats& from);
  void MergeFrom(const Update_UnitStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 health = 1;
  inline bool has_health() const;
  inline void clear_health();
  static const int kHealthFieldNumber = 1;
  inline ::google::protobuf::int32 health() const;
  inline void set_health(::google::protobuf::int32 value);

  // optional int32 attack = 2;
  inline bool has_attack() const;
  inline void clear_attack();
  static const int kAttackFieldNumber = 2;
  inline ::google::protobuf::int32 attack() const;
  inline void set_attack(::google::protobuf::int32 value);

  // optional int32 armour = 3;
  inline bool has_armour() const;
  inline void clear_armour();
  static const int kArmourFieldNumber = 3;
  inline ::google::protobuf::int32 armour() const;
  inline void set_armour(::google::protobuf::int32 value);

  // optional float move = 4;
  inline bool has_move() const;
  inline void clear_move();
  static const int kMoveFieldNumber = 4;
  inline float move() const;
  inline void set_move(float value);

  // optional float initiative = 5;
  inline bool has_initiative() const;
  inline void clear_initiative();
  static const int kInitiativeFieldNumber = 5;
  inline float initiative() const;
  inline void set_initiative(float value);

  // optional string name = 6;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 6;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 range = 7;
  inline bool has_range() const;
  inline void clear_range();
  static const int kRangeFieldNumber = 7;
  inline ::google::protobuf::int32 range() const;
  inline void set_range(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.Update.UnitStats)
 private:
  inline void set_has_health();
  inline void clear_has_health();
  inline void set_has_attack();
  inline void clear_has_attack();
  inline void set_has_armour();
  inline void clear_has_armour();
  inline void set_has_move();
  inline void clear_has_move();
  inline void set_has_initiative();
  inline void clear_has_initiative();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_range();
  inline void clear_has_range();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 health_;
  ::google::protobuf::int32 attack_;
  ::google::protobuf::int32 armour_;
  float move_;
  ::std::string* name_;
  float initiative_;
  ::google::protobuf::int32 range_;
  friend void  protobuf_AddDesc_message_5fformat_2eproto();
  friend void protobuf_AssignDesc_message_5fformat_2eproto();
  friend void protobuf_ShutdownFile_message_5fformat_2eproto();

  void InitAsDefaultInstance();
  static Update_UnitStats* default_instance_;
};
// -------------------------------------------------------------------

class Update_AnimationHints : public ::google::protobuf::Message {
 public:
  Update_AnimationHints();
  virtual ~Update_AnimationHints();

  Update_AnimationHints(const Update_AnimationHints& from);

  inline Update_AnimationHints& operator=(const Update_AnimationHints& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Update_AnimationHints& default_instance();

  void Swap(Update_AnimationHints* other);

  // implements Message ----------------------------------------------

  Update_AnimationHints* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Update_AnimationHints& from);
  void MergeFrom(const Update_AnimationHints& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string hint = 1;
  inline bool has_hint() const;
  inline void clear_hint();
  static const int kHintFieldNumber = 1;
  inline const ::std::string& hint() const;
  inline void set_hint(const ::std::string& value);
  inline void set_hint(const char* value);
  inline void set_hint(const char* value, size_t size);
  inline ::std::string* mutable_hint();
  inline ::std::string* release_hint();
  inline void set_allocated_hint(::std::string* hint);

  // optional int32 timing = 2;
  inline bool has_timing() const;
  inline void clear_timing();
  static const int kTimingFieldNumber = 2;
  inline ::google::protobuf::int32 timing() const;
  inline void set_timing(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.Update.AnimationHints)
 private:
  inline void set_has_hint();
  inline void clear_has_hint();
  inline void set_has_timing();
  inline void clear_has_timing();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* hint_;
  ::google::protobuf::int32 timing_;
  friend void  protobuf_AddDesc_message_5fformat_2eproto();
  friend void protobuf_AssignDesc_message_5fformat_2eproto();
  friend void protobuf_ShutdownFile_message_5fformat_2eproto();

  void InitAsDefaultInstance();
  static Update_AnimationHints* default_instance_;
};
// -------------------------------------------------------------------

class Update_Unit : public ::google::protobuf::Message {
 public:
  Update_Unit();
  virtual ~Update_Unit();

  Update_Unit(const Update_Unit& from);

  inline Update_Unit& operator=(const Update_Unit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Update_Unit& default_instance();

  void Swap(Update_Unit* other);

  // implements Message ----------------------------------------------

  Update_Unit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Update_Unit& from);
  void MergeFrom(const Update_Unit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Update_Unit_MessageType MessageType;
  static const MessageType CANONICAL_STATE = Update_Unit_MessageType_CANONICAL_STATE;
  static const MessageType SUMMON = Update_Unit_MessageType_SUMMON;
  static const MessageType MOVE = Update_Unit_MessageType_MOVE;
  static const MessageType ATTACK = Update_Unit_MessageType_ATTACK;
  static const MessageType SPELL = Update_Unit_MessageType_SPELL;
  static const MessageType PASS = Update_Unit_MessageType_PASS;
  static inline bool MessageType_IsValid(int value) {
    return Update_Unit_MessageType_IsValid(value);
  }
  static const MessageType MessageType_MIN =
    Update_Unit_MessageType_MessageType_MIN;
  static const MessageType MessageType_MAX =
    Update_Unit_MessageType_MessageType_MAX;
  static const int MessageType_ARRAYSIZE =
    Update_Unit_MessageType_MessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MessageType_descriptor() {
    return Update_Unit_MessageType_descriptor();
  }
  static inline const ::std::string& MessageType_Name(MessageType value) {
    return Update_Unit_MessageType_Name(value);
  }
  static inline bool MessageType_Parse(const ::std::string& name,
      MessageType* value) {
    return Update_Unit_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // optional .game.Update.Unit.MessageType type = 2 [default = CANONICAL_STATE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::game::Update_Unit_MessageType type() const;
  inline void set_type(::game::Update_Unit_MessageType value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string owner_uuid = 4;
  inline bool has_owner_uuid() const;
  inline void clear_owner_uuid();
  static const int kOwnerUuidFieldNumber = 4;
  inline const ::std::string& owner_uuid() const;
  inline void set_owner_uuid(const ::std::string& value);
  inline void set_owner_uuid(const char* value);
  inline void set_owner_uuid(const char* value, size_t size);
  inline ::std::string* mutable_owner_uuid();
  inline ::std::string* release_owner_uuid();
  inline void set_allocated_owner_uuid(::std::string* owner_uuid);

  // optional .game.Update.UnitStats stats = 5;
  inline bool has_stats() const;
  inline void clear_stats();
  static const int kStatsFieldNumber = 5;
  inline const ::game::Update_UnitStats& stats() const;
  inline ::game::Update_UnitStats* mutable_stats();
  inline ::game::Update_UnitStats* release_stats();
  inline void set_allocated_stats(::game::Update_UnitStats* stats);

  // repeated string target_uuids = 6;
  inline int target_uuids_size() const;
  inline void clear_target_uuids();
  static const int kTargetUuidsFieldNumber = 6;
  inline const ::std::string& target_uuids(int index) const;
  inline ::std::string* mutable_target_uuids(int index);
  inline void set_target_uuids(int index, const ::std::string& value);
  inline void set_target_uuids(int index, const char* value);
  inline void set_target_uuids(int index, const char* value, size_t size);
  inline ::std::string* add_target_uuids();
  inline void add_target_uuids(const ::std::string& value);
  inline void add_target_uuids(const char* value);
  inline void add_target_uuids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& target_uuids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_target_uuids();

  // repeated .game.Update.Location path = 7;
  inline int path_size() const;
  inline void clear_path();
  static const int kPathFieldNumber = 7;
  inline const ::game::Update_Location& path(int index) const;
  inline ::game::Update_Location* mutable_path(int index);
  inline ::game::Update_Location* add_path();
  inline const ::google::protobuf::RepeatedPtrField< ::game::Update_Location >&
      path() const;
  inline ::google::protobuf::RepeatedPtrField< ::game::Update_Location >*
      mutable_path();

  // repeated .game.Update.AnimationHints animation_hints = 8;
  inline int animation_hints_size() const;
  inline void clear_animation_hints();
  static const int kAnimationHintsFieldNumber = 8;
  inline const ::game::Update_AnimationHints& animation_hints(int index) const;
  inline ::game::Update_AnimationHints* mutable_animation_hints(int index);
  inline ::game::Update_AnimationHints* add_animation_hints();
  inline const ::google::protobuf::RepeatedPtrField< ::game::Update_AnimationHints >&
      animation_hints() const;
  inline ::google::protobuf::RepeatedPtrField< ::game::Update_AnimationHints >*
      mutable_animation_hints();

  // @@protoc_insertion_point(class_scope:game.Update.Unit)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_owner_uuid();
  inline void clear_has_owner_uuid();
  inline void set_has_stats();
  inline void clear_has_stats();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uuid_;
  ::std::string* name_;
  ::std::string* owner_uuid_;
  ::game::Update_UnitStats* stats_;
  ::google::protobuf::RepeatedPtrField< ::std::string> target_uuids_;
  ::google::protobuf::RepeatedPtrField< ::game::Update_Location > path_;
  ::google::protobuf::RepeatedPtrField< ::game::Update_AnimationHints > animation_hints_;
  int type_;
  friend void  protobuf_AddDesc_message_5fformat_2eproto();
  friend void protobuf_AssignDesc_message_5fformat_2eproto();
  friend void protobuf_ShutdownFile_message_5fformat_2eproto();

  void InitAsDefaultInstance();
  static Update_Unit* default_instance_;
};
// -------------------------------------------------------------------

class Update_Player : public ::google::protobuf::Message {
 public:
  Update_Player();
  virtual ~Update_Player();

  Update_Player(const Update_Player& from);

  inline Update_Player& operator=(const Update_Player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Update_Player& default_instance();

  void Swap(Update_Player* other);

  // implements Message ----------------------------------------------

  Update_Player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Update_Player& from);
  void MergeFrom(const Update_Player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Update_Player_Action Action;
  static const Action CANONICAL_STATE = Update_Player_Action_CANONICAL_STATE;
  static const Action JOIN = Update_Player_Action_JOIN;
  static const Action QUIT = Update_Player_Action_QUIT;
  static const Action CONCEDE = Update_Player_Action_CONCEDE;
  static inline bool Action_IsValid(int value) {
    return Update_Player_Action_IsValid(value);
  }
  static const Action Action_MIN =
    Update_Player_Action_Action_MIN;
  static const Action Action_MAX =
    Update_Player_Action_Action_MAX;
  static const int Action_ARRAYSIZE =
    Update_Player_Action_Action_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Action_descriptor() {
    return Update_Player_Action_descriptor();
  }
  static inline const ::std::string& Action_Name(Action value) {
    return Update_Player_Action_Name(value);
  }
  static inline bool Action_Parse(const ::std::string& name,
      Action* value) {
    return Update_Player_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .game.Update.Player.Action action = 3 [default = CANONICAL_STATE];
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 3;
  inline ::game::Update_Player_Action action() const;
  inline void set_action(::game::Update_Player_Action value);

  // optional string team_uuid = 4;
  inline bool has_team_uuid() const;
  inline void clear_team_uuid();
  static const int kTeamUuidFieldNumber = 4;
  inline const ::std::string& team_uuid() const;
  inline void set_team_uuid(const ::std::string& value);
  inline void set_team_uuid(const char* value);
  inline void set_team_uuid(const char* value, size_t size);
  inline ::std::string* mutable_team_uuid();
  inline ::std::string* release_team_uuid();
  inline void set_allocated_team_uuid(::std::string* team_uuid);

  // optional string team_name = 5;
  inline bool has_team_name() const;
  inline void clear_team_name();
  static const int kTeamNameFieldNumber = 5;
  inline const ::std::string& team_name() const;
  inline void set_team_name(const ::std::string& value);
  inline void set_team_name(const char* value);
  inline void set_team_name(const char* value, size_t size);
  inline ::std::string* mutable_team_name();
  inline ::std::string* release_team_name();
  inline void set_allocated_team_name(::std::string* team_name);

  // @@protoc_insertion_point(class_scope:game.Update.Player)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_team_uuid();
  inline void clear_has_team_uuid();
  inline void set_has_team_name();
  inline void clear_has_team_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uuid_;
  ::std::string* name_;
  ::std::string* team_uuid_;
  ::std::string* team_name_;
  int action_;
  friend void  protobuf_AddDesc_message_5fformat_2eproto();
  friend void protobuf_AssignDesc_message_5fformat_2eproto();
  friend void protobuf_ShutdownFile_message_5fformat_2eproto();

  void InitAsDefaultInstance();
  static Update_Player* default_instance_;
};
// -------------------------------------------------------------------

class Update : public ::google::protobuf::Message {
 public:
  Update();
  virtual ~Update();

  Update(const Update& from);

  inline Update& operator=(const Update& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Update& default_instance();

  void Swap(Update* other);

  // implements Message ----------------------------------------------

  Update* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Update& from);
  void MergeFrom(const Update& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Update_Location Location;
  typedef Update_UnitStats UnitStats;
  typedef Update_AnimationHints AnimationHints;
  typedef Update_Unit Unit;
  typedef Update_Player Player;

  typedef Update_GameWinState GameWinState;
  static const GameWinState IN_PROGRESS = Update_GameWinState_IN_PROGRESS;
  static const GameWinState WON = Update_GameWinState_WON;
  static const GameWinState DRAW = Update_GameWinState_DRAW;
  static inline bool GameWinState_IsValid(int value) {
    return Update_GameWinState_IsValid(value);
  }
  static const GameWinState GameWinState_MIN =
    Update_GameWinState_GameWinState_MIN;
  static const GameWinState GameWinState_MAX =
    Update_GameWinState_GameWinState_MAX;
  static const int GameWinState_ARRAYSIZE =
    Update_GameWinState_GameWinState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GameWinState_descriptor() {
    return Update_GameWinState_descriptor();
  }
  static inline const ::std::string& GameWinState_Name(GameWinState value) {
    return Update_GameWinState_Name(value);
  }
  static inline bool GameWinState_Parse(const ::std::string& name,
      GameWinState* value) {
    return Update_GameWinState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional bool quit = 2;
  inline bool has_quit() const;
  inline void clear_quit();
  static const int kQuitFieldNumber = 2;
  inline bool quit() const;
  inline void set_quit(bool value);

  // optional bool end_turn = 3;
  inline bool has_end_turn() const;
  inline void clear_end_turn();
  static const int kEndTurnFieldNumber = 3;
  inline bool end_turn() const;
  inline void set_end_turn(bool value);

  // optional .game.Update.GameWinState game_win_state = 4 [default = IN_PROGRESS];
  inline bool has_game_win_state() const;
  inline void clear_game_win_state();
  static const int kGameWinStateFieldNumber = 4;
  inline ::game::Update_GameWinState game_win_state() const;
  inline void set_game_win_state(::game::Update_GameWinState value);

  // optional string winning_team_uuid = 5;
  inline bool has_winning_team_uuid() const;
  inline void clear_winning_team_uuid();
  static const int kWinningTeamUuidFieldNumber = 5;
  inline const ::std::string& winning_team_uuid() const;
  inline void set_winning_team_uuid(const ::std::string& value);
  inline void set_winning_team_uuid(const char* value);
  inline void set_winning_team_uuid(const char* value, size_t size);
  inline ::std::string* mutable_winning_team_uuid();
  inline ::std::string* release_winning_team_uuid();
  inline void set_allocated_winning_team_uuid(::std::string* winning_team_uuid);

  // optional string fail_reason = 6;
  inline bool has_fail_reason() const;
  inline void clear_fail_reason();
  static const int kFailReasonFieldNumber = 6;
  inline const ::std::string& fail_reason() const;
  inline void set_fail_reason(const ::std::string& value);
  inline void set_fail_reason(const char* value);
  inline void set_fail_reason(const char* value, size_t size);
  inline ::std::string* mutable_fail_reason();
  inline ::std::string* release_fail_reason();
  inline void set_allocated_fail_reason(::std::string* fail_reason);

  // repeated .game.Update.Unit units = 7;
  inline int units_size() const;
  inline void clear_units();
  static const int kUnitsFieldNumber = 7;
  inline const ::game::Update_Unit& units(int index) const;
  inline ::game::Update_Unit* mutable_units(int index);
  inline ::game::Update_Unit* add_units();
  inline const ::google::protobuf::RepeatedPtrField< ::game::Update_Unit >&
      units() const;
  inline ::google::protobuf::RepeatedPtrField< ::game::Update_Unit >*
      mutable_units();

  // repeated .game.Update.Player player = 8;
  inline int player_size() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 8;
  inline const ::game::Update_Player& player(int index) const;
  inline ::game::Update_Player* mutable_player(int index);
  inline ::game::Update_Player* add_player();
  inline const ::google::protobuf::RepeatedPtrField< ::game::Update_Player >&
      player() const;
  inline ::google::protobuf::RepeatedPtrField< ::game::Update_Player >*
      mutable_player();

  // @@protoc_insertion_point(class_scope:game.Update)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_quit();
  inline void clear_has_quit();
  inline void set_has_end_turn();
  inline void clear_has_end_turn();
  inline void set_has_game_win_state();
  inline void clear_has_game_win_state();
  inline void set_has_winning_team_uuid();
  inline void clear_has_winning_team_uuid();
  inline void set_has_fail_reason();
  inline void clear_has_fail_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  bool quit_;
  bool end_turn_;
  ::std::string* winning_team_uuid_;
  ::std::string* fail_reason_;
  ::google::protobuf::RepeatedPtrField< ::game::Update_Unit > units_;
  ::google::protobuf::RepeatedPtrField< ::game::Update_Player > player_;
  int game_win_state_;
  friend void  protobuf_AddDesc_message_5fformat_2eproto();
  friend void protobuf_AssignDesc_message_5fformat_2eproto();
  friend void protobuf_ShutdownFile_message_5fformat_2eproto();

  void InitAsDefaultInstance();
  static Update* default_instance_;
};
// ===================================================================


// ===================================================================

// Update_Location

// required int32 x = 1;
inline bool Update_Location::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Update_Location::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Update_Location::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Update_Location::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 Update_Location::x() const {
  // @@protoc_insertion_point(field_get:game.Update.Location.x)
  return x_;
}
inline void Update_Location::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:game.Update.Location.x)
}

// required int32 y = 2;
inline bool Update_Location::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Update_Location::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Update_Location::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Update_Location::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 Update_Location::y() const {
  // @@protoc_insertion_point(field_get:game.Update.Location.y)
  return y_;
}
inline void Update_Location::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:game.Update.Location.y)
}

// -------------------------------------------------------------------

// Update_UnitStats

// optional int32 health = 1;
inline bool Update_UnitStats::has_health() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Update_UnitStats::set_has_health() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Update_UnitStats::clear_has_health() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Update_UnitStats::clear_health() {
  health_ = 0;
  clear_has_health();
}
inline ::google::protobuf::int32 Update_UnitStats::health() const {
  // @@protoc_insertion_point(field_get:game.Update.UnitStats.health)
  return health_;
}
inline void Update_UnitStats::set_health(::google::protobuf::int32 value) {
  set_has_health();
  health_ = value;
  // @@protoc_insertion_point(field_set:game.Update.UnitStats.health)
}

// optional int32 attack = 2;
inline bool Update_UnitStats::has_attack() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Update_UnitStats::set_has_attack() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Update_UnitStats::clear_has_attack() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Update_UnitStats::clear_attack() {
  attack_ = 0;
  clear_has_attack();
}
inline ::google::protobuf::int32 Update_UnitStats::attack() const {
  // @@protoc_insertion_point(field_get:game.Update.UnitStats.attack)
  return attack_;
}
inline void Update_UnitStats::set_attack(::google::protobuf::int32 value) {
  set_has_attack();
  attack_ = value;
  // @@protoc_insertion_point(field_set:game.Update.UnitStats.attack)
}

// optional int32 armour = 3;
inline bool Update_UnitStats::has_armour() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Update_UnitStats::set_has_armour() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Update_UnitStats::clear_has_armour() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Update_UnitStats::clear_armour() {
  armour_ = 0;
  clear_has_armour();
}
inline ::google::protobuf::int32 Update_UnitStats::armour() const {
  // @@protoc_insertion_point(field_get:game.Update.UnitStats.armour)
  return armour_;
}
inline void Update_UnitStats::set_armour(::google::protobuf::int32 value) {
  set_has_armour();
  armour_ = value;
  // @@protoc_insertion_point(field_set:game.Update.UnitStats.armour)
}

// optional float move = 4;
inline bool Update_UnitStats::has_move() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Update_UnitStats::set_has_move() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Update_UnitStats::clear_has_move() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Update_UnitStats::clear_move() {
  move_ = 0;
  clear_has_move();
}
inline float Update_UnitStats::move() const {
  // @@protoc_insertion_point(field_get:game.Update.UnitStats.move)
  return move_;
}
inline void Update_UnitStats::set_move(float value) {
  set_has_move();
  move_ = value;
  // @@protoc_insertion_point(field_set:game.Update.UnitStats.move)
}

// optional float initiative = 5;
inline bool Update_UnitStats::has_initiative() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Update_UnitStats::set_has_initiative() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Update_UnitStats::clear_has_initiative() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Update_UnitStats::clear_initiative() {
  initiative_ = 0;
  clear_has_initiative();
}
inline float Update_UnitStats::initiative() const {
  // @@protoc_insertion_point(field_get:game.Update.UnitStats.initiative)
  return initiative_;
}
inline void Update_UnitStats::set_initiative(float value) {
  set_has_initiative();
  initiative_ = value;
  // @@protoc_insertion_point(field_set:game.Update.UnitStats.initiative)
}

// optional string name = 6;
inline bool Update_UnitStats::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Update_UnitStats::set_has_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Update_UnitStats::clear_has_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Update_UnitStats::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Update_UnitStats::name() const {
  // @@protoc_insertion_point(field_get:game.Update.UnitStats.name)
  return *name_;
}
inline void Update_UnitStats::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:game.Update.UnitStats.name)
}
inline void Update_UnitStats::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:game.Update.UnitStats.name)
}
inline void Update_UnitStats::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:game.Update.UnitStats.name)
}
inline ::std::string* Update_UnitStats::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:game.Update.UnitStats.name)
  return name_;
}
inline ::std::string* Update_UnitStats::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Update_UnitStats::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:game.Update.UnitStats.name)
}

// optional int32 range = 7;
inline bool Update_UnitStats::has_range() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Update_UnitStats::set_has_range() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Update_UnitStats::clear_has_range() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Update_UnitStats::clear_range() {
  range_ = 0;
  clear_has_range();
}
inline ::google::protobuf::int32 Update_UnitStats::range() const {
  // @@protoc_insertion_point(field_get:game.Update.UnitStats.range)
  return range_;
}
inline void Update_UnitStats::set_range(::google::protobuf::int32 value) {
  set_has_range();
  range_ = value;
  // @@protoc_insertion_point(field_set:game.Update.UnitStats.range)
}

// -------------------------------------------------------------------

// Update_AnimationHints

// optional string hint = 1;
inline bool Update_AnimationHints::has_hint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Update_AnimationHints::set_has_hint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Update_AnimationHints::clear_has_hint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Update_AnimationHints::clear_hint() {
  if (hint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hint_->clear();
  }
  clear_has_hint();
}
inline const ::std::string& Update_AnimationHints::hint() const {
  // @@protoc_insertion_point(field_get:game.Update.AnimationHints.hint)
  return *hint_;
}
inline void Update_AnimationHints::set_hint(const ::std::string& value) {
  set_has_hint();
  if (hint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hint_ = new ::std::string;
  }
  hint_->assign(value);
  // @@protoc_insertion_point(field_set:game.Update.AnimationHints.hint)
}
inline void Update_AnimationHints::set_hint(const char* value) {
  set_has_hint();
  if (hint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hint_ = new ::std::string;
  }
  hint_->assign(value);
  // @@protoc_insertion_point(field_set_char:game.Update.AnimationHints.hint)
}
inline void Update_AnimationHints::set_hint(const char* value, size_t size) {
  set_has_hint();
  if (hint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hint_ = new ::std::string;
  }
  hint_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:game.Update.AnimationHints.hint)
}
inline ::std::string* Update_AnimationHints::mutable_hint() {
  set_has_hint();
  if (hint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hint_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:game.Update.AnimationHints.hint)
  return hint_;
}
inline ::std::string* Update_AnimationHints::release_hint() {
  clear_has_hint();
  if (hint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hint_;
    hint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Update_AnimationHints::set_allocated_hint(::std::string* hint) {
  if (hint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hint_;
  }
  if (hint) {
    set_has_hint();
    hint_ = hint;
  } else {
    clear_has_hint();
    hint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:game.Update.AnimationHints.hint)
}

// optional int32 timing = 2;
inline bool Update_AnimationHints::has_timing() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Update_AnimationHints::set_has_timing() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Update_AnimationHints::clear_has_timing() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Update_AnimationHints::clear_timing() {
  timing_ = 0;
  clear_has_timing();
}
inline ::google::protobuf::int32 Update_AnimationHints::timing() const {
  // @@protoc_insertion_point(field_get:game.Update.AnimationHints.timing)
  return timing_;
}
inline void Update_AnimationHints::set_timing(::google::protobuf::int32 value) {
  set_has_timing();
  timing_ = value;
  // @@protoc_insertion_point(field_set:game.Update.AnimationHints.timing)
}

// -------------------------------------------------------------------

// Update_Unit

// required string uuid = 1;
inline bool Update_Unit::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Update_Unit::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Update_Unit::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Update_Unit::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& Update_Unit::uuid() const {
  // @@protoc_insertion_point(field_get:game.Update.Unit.uuid)
  return *uuid_;
}
inline void Update_Unit::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set:game.Update.Unit.uuid)
}
inline void Update_Unit::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:game.Update.Unit.uuid)
}
inline void Update_Unit::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:game.Update.Unit.uuid)
}
inline ::std::string* Update_Unit::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:game.Update.Unit.uuid)
  return uuid_;
}
inline ::std::string* Update_Unit::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Update_Unit::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:game.Update.Unit.uuid)
}

// optional .game.Update.Unit.MessageType type = 2 [default = CANONICAL_STATE];
inline bool Update_Unit::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Update_Unit::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Update_Unit::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Update_Unit::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::game::Update_Unit_MessageType Update_Unit::type() const {
  // @@protoc_insertion_point(field_get:game.Update.Unit.type)
  return static_cast< ::game::Update_Unit_MessageType >(type_);
}
inline void Update_Unit::set_type(::game::Update_Unit_MessageType value) {
  assert(::game::Update_Unit_MessageType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:game.Update.Unit.type)
}

// optional string name = 3;
inline bool Update_Unit::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Update_Unit::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Update_Unit::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Update_Unit::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Update_Unit::name() const {
  // @@protoc_insertion_point(field_get:game.Update.Unit.name)
  return *name_;
}
inline void Update_Unit::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:game.Update.Unit.name)
}
inline void Update_Unit::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:game.Update.Unit.name)
}
inline void Update_Unit::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:game.Update.Unit.name)
}
inline ::std::string* Update_Unit::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:game.Update.Unit.name)
  return name_;
}
inline ::std::string* Update_Unit::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Update_Unit::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:game.Update.Unit.name)
}

// optional string owner_uuid = 4;
inline bool Update_Unit::has_owner_uuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Update_Unit::set_has_owner_uuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Update_Unit::clear_has_owner_uuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Update_Unit::clear_owner_uuid() {
  if (owner_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    owner_uuid_->clear();
  }
  clear_has_owner_uuid();
}
inline const ::std::string& Update_Unit::owner_uuid() const {
  // @@protoc_insertion_point(field_get:game.Update.Unit.owner_uuid)
  return *owner_uuid_;
}
inline void Update_Unit::set_owner_uuid(const ::std::string& value) {
  set_has_owner_uuid();
  if (owner_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    owner_uuid_ = new ::std::string;
  }
  owner_uuid_->assign(value);
  // @@protoc_insertion_point(field_set:game.Update.Unit.owner_uuid)
}
inline void Update_Unit::set_owner_uuid(const char* value) {
  set_has_owner_uuid();
  if (owner_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    owner_uuid_ = new ::std::string;
  }
  owner_uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:game.Update.Unit.owner_uuid)
}
inline void Update_Unit::set_owner_uuid(const char* value, size_t size) {
  set_has_owner_uuid();
  if (owner_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    owner_uuid_ = new ::std::string;
  }
  owner_uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:game.Update.Unit.owner_uuid)
}
inline ::std::string* Update_Unit::mutable_owner_uuid() {
  set_has_owner_uuid();
  if (owner_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    owner_uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:game.Update.Unit.owner_uuid)
  return owner_uuid_;
}
inline ::std::string* Update_Unit::release_owner_uuid() {
  clear_has_owner_uuid();
  if (owner_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = owner_uuid_;
    owner_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Update_Unit::set_allocated_owner_uuid(::std::string* owner_uuid) {
  if (owner_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete owner_uuid_;
  }
  if (owner_uuid) {
    set_has_owner_uuid();
    owner_uuid_ = owner_uuid;
  } else {
    clear_has_owner_uuid();
    owner_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:game.Update.Unit.owner_uuid)
}

// optional .game.Update.UnitStats stats = 5;
inline bool Update_Unit::has_stats() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Update_Unit::set_has_stats() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Update_Unit::clear_has_stats() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Update_Unit::clear_stats() {
  if (stats_ != NULL) stats_->::game::Update_UnitStats::Clear();
  clear_has_stats();
}
inline const ::game::Update_UnitStats& Update_Unit::stats() const {
  // @@protoc_insertion_point(field_get:game.Update.Unit.stats)
  return stats_ != NULL ? *stats_ : *default_instance_->stats_;
}
inline ::game::Update_UnitStats* Update_Unit::mutable_stats() {
  set_has_stats();
  if (stats_ == NULL) stats_ = new ::game::Update_UnitStats;
  // @@protoc_insertion_point(field_mutable:game.Update.Unit.stats)
  return stats_;
}
inline ::game::Update_UnitStats* Update_Unit::release_stats() {
  clear_has_stats();
  ::game::Update_UnitStats* temp = stats_;
  stats_ = NULL;
  return temp;
}
inline void Update_Unit::set_allocated_stats(::game::Update_UnitStats* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    set_has_stats();
  } else {
    clear_has_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:game.Update.Unit.stats)
}

// repeated string target_uuids = 6;
inline int Update_Unit::target_uuids_size() const {
  return target_uuids_.size();
}
inline void Update_Unit::clear_target_uuids() {
  target_uuids_.Clear();
}
inline const ::std::string& Update_Unit::target_uuids(int index) const {
  // @@protoc_insertion_point(field_get:game.Update.Unit.target_uuids)
  return target_uuids_.Get(index);
}
inline ::std::string* Update_Unit::mutable_target_uuids(int index) {
  // @@protoc_insertion_point(field_mutable:game.Update.Unit.target_uuids)
  return target_uuids_.Mutable(index);
}
inline void Update_Unit::set_target_uuids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:game.Update.Unit.target_uuids)
  target_uuids_.Mutable(index)->assign(value);
}
inline void Update_Unit::set_target_uuids(int index, const char* value) {
  target_uuids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:game.Update.Unit.target_uuids)
}
inline void Update_Unit::set_target_uuids(int index, const char* value, size_t size) {
  target_uuids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:game.Update.Unit.target_uuids)
}
inline ::std::string* Update_Unit::add_target_uuids() {
  return target_uuids_.Add();
}
inline void Update_Unit::add_target_uuids(const ::std::string& value) {
  target_uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:game.Update.Unit.target_uuids)
}
inline void Update_Unit::add_target_uuids(const char* value) {
  target_uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:game.Update.Unit.target_uuids)
}
inline void Update_Unit::add_target_uuids(const char* value, size_t size) {
  target_uuids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:game.Update.Unit.target_uuids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Update_Unit::target_uuids() const {
  // @@protoc_insertion_point(field_list:game.Update.Unit.target_uuids)
  return target_uuids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Update_Unit::mutable_target_uuids() {
  // @@protoc_insertion_point(field_mutable_list:game.Update.Unit.target_uuids)
  return &target_uuids_;
}

// repeated .game.Update.Location path = 7;
inline int Update_Unit::path_size() const {
  return path_.size();
}
inline void Update_Unit::clear_path() {
  path_.Clear();
}
inline const ::game::Update_Location& Update_Unit::path(int index) const {
  // @@protoc_insertion_point(field_get:game.Update.Unit.path)
  return path_.Get(index);
}
inline ::game::Update_Location* Update_Unit::mutable_path(int index) {
  // @@protoc_insertion_point(field_mutable:game.Update.Unit.path)
  return path_.Mutable(index);
}
inline ::game::Update_Location* Update_Unit::add_path() {
  // @@protoc_insertion_point(field_add:game.Update.Unit.path)
  return path_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game::Update_Location >&
Update_Unit::path() const {
  // @@protoc_insertion_point(field_list:game.Update.Unit.path)
  return path_;
}
inline ::google::protobuf::RepeatedPtrField< ::game::Update_Location >*
Update_Unit::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:game.Update.Unit.path)
  return &path_;
}

// repeated .game.Update.AnimationHints animation_hints = 8;
inline int Update_Unit::animation_hints_size() const {
  return animation_hints_.size();
}
inline void Update_Unit::clear_animation_hints() {
  animation_hints_.Clear();
}
inline const ::game::Update_AnimationHints& Update_Unit::animation_hints(int index) const {
  // @@protoc_insertion_point(field_get:game.Update.Unit.animation_hints)
  return animation_hints_.Get(index);
}
inline ::game::Update_AnimationHints* Update_Unit::mutable_animation_hints(int index) {
  // @@protoc_insertion_point(field_mutable:game.Update.Unit.animation_hints)
  return animation_hints_.Mutable(index);
}
inline ::game::Update_AnimationHints* Update_Unit::add_animation_hints() {
  // @@protoc_insertion_point(field_add:game.Update.Unit.animation_hints)
  return animation_hints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game::Update_AnimationHints >&
Update_Unit::animation_hints() const {
  // @@protoc_insertion_point(field_list:game.Update.Unit.animation_hints)
  return animation_hints_;
}
inline ::google::protobuf::RepeatedPtrField< ::game::Update_AnimationHints >*
Update_Unit::mutable_animation_hints() {
  // @@protoc_insertion_point(field_mutable_list:game.Update.Unit.animation_hints)
  return &animation_hints_;
}

// -------------------------------------------------------------------

// Update_Player

// required string uuid = 1;
inline bool Update_Player::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Update_Player::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Update_Player::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Update_Player::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& Update_Player::uuid() const {
  // @@protoc_insertion_point(field_get:game.Update.Player.uuid)
  return *uuid_;
}
inline void Update_Player::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set:game.Update.Player.uuid)
}
inline void Update_Player::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:game.Update.Player.uuid)
}
inline void Update_Player::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:game.Update.Player.uuid)
}
inline ::std::string* Update_Player::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:game.Update.Player.uuid)
  return uuid_;
}
inline ::std::string* Update_Player::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Update_Player::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:game.Update.Player.uuid)
}

// optional string name = 2;
inline bool Update_Player::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Update_Player::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Update_Player::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Update_Player::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Update_Player::name() const {
  // @@protoc_insertion_point(field_get:game.Update.Player.name)
  return *name_;
}
inline void Update_Player::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:game.Update.Player.name)
}
inline void Update_Player::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:game.Update.Player.name)
}
inline void Update_Player::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:game.Update.Player.name)
}
inline ::std::string* Update_Player::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:game.Update.Player.name)
  return name_;
}
inline ::std::string* Update_Player::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Update_Player::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:game.Update.Player.name)
}

// optional .game.Update.Player.Action action = 3 [default = CANONICAL_STATE];
inline bool Update_Player::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Update_Player::set_has_action() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Update_Player::clear_has_action() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Update_Player::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::game::Update_Player_Action Update_Player::action() const {
  // @@protoc_insertion_point(field_get:game.Update.Player.action)
  return static_cast< ::game::Update_Player_Action >(action_);
}
inline void Update_Player::set_action(::game::Update_Player_Action value) {
  assert(::game::Update_Player_Action_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:game.Update.Player.action)
}

// optional string team_uuid = 4;
inline bool Update_Player::has_team_uuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Update_Player::set_has_team_uuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Update_Player::clear_has_team_uuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Update_Player::clear_team_uuid() {
  if (team_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_uuid_->clear();
  }
  clear_has_team_uuid();
}
inline const ::std::string& Update_Player::team_uuid() const {
  // @@protoc_insertion_point(field_get:game.Update.Player.team_uuid)
  return *team_uuid_;
}
inline void Update_Player::set_team_uuid(const ::std::string& value) {
  set_has_team_uuid();
  if (team_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_uuid_ = new ::std::string;
  }
  team_uuid_->assign(value);
  // @@protoc_insertion_point(field_set:game.Update.Player.team_uuid)
}
inline void Update_Player::set_team_uuid(const char* value) {
  set_has_team_uuid();
  if (team_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_uuid_ = new ::std::string;
  }
  team_uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:game.Update.Player.team_uuid)
}
inline void Update_Player::set_team_uuid(const char* value, size_t size) {
  set_has_team_uuid();
  if (team_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_uuid_ = new ::std::string;
  }
  team_uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:game.Update.Player.team_uuid)
}
inline ::std::string* Update_Player::mutable_team_uuid() {
  set_has_team_uuid();
  if (team_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:game.Update.Player.team_uuid)
  return team_uuid_;
}
inline ::std::string* Update_Player::release_team_uuid() {
  clear_has_team_uuid();
  if (team_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = team_uuid_;
    team_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Update_Player::set_allocated_team_uuid(::std::string* team_uuid) {
  if (team_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_uuid_;
  }
  if (team_uuid) {
    set_has_team_uuid();
    team_uuid_ = team_uuid;
  } else {
    clear_has_team_uuid();
    team_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:game.Update.Player.team_uuid)
}

// optional string team_name = 5;
inline bool Update_Player::has_team_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Update_Player::set_has_team_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Update_Player::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Update_Player::clear_team_name() {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_->clear();
  }
  clear_has_team_name();
}
inline const ::std::string& Update_Player::team_name() const {
  // @@protoc_insertion_point(field_get:game.Update.Player.team_name)
  return *team_name_;
}
inline void Update_Player::set_team_name(const ::std::string& value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
  // @@protoc_insertion_point(field_set:game.Update.Player.team_name)
}
inline void Update_Player::set_team_name(const char* value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:game.Update.Player.team_name)
}
inline void Update_Player::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:game.Update.Player.team_name)
}
inline ::std::string* Update_Player::mutable_team_name() {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:game.Update.Player.team_name)
  return team_name_;
}
inline ::std::string* Update_Player::release_team_name() {
  clear_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = team_name_;
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Update_Player::set_allocated_team_name(::std::string* team_name) {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_name_;
  }
  if (team_name) {
    set_has_team_name();
    team_name_ = team_name;
  } else {
    clear_has_team_name();
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:game.Update.Player.team_name)
}

// -------------------------------------------------------------------

// Update

// required int32 id = 1;
inline bool Update::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Update::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Update::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Update::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Update::id() const {
  // @@protoc_insertion_point(field_get:game.Update.id)
  return id_;
}
inline void Update::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:game.Update.id)
}

// optional bool quit = 2;
inline bool Update::has_quit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Update::set_has_quit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Update::clear_has_quit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Update::clear_quit() {
  quit_ = false;
  clear_has_quit();
}
inline bool Update::quit() const {
  // @@protoc_insertion_point(field_get:game.Update.quit)
  return quit_;
}
inline void Update::set_quit(bool value) {
  set_has_quit();
  quit_ = value;
  // @@protoc_insertion_point(field_set:game.Update.quit)
}

// optional bool end_turn = 3;
inline bool Update::has_end_turn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Update::set_has_end_turn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Update::clear_has_end_turn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Update::clear_end_turn() {
  end_turn_ = false;
  clear_has_end_turn();
}
inline bool Update::end_turn() const {
  // @@protoc_insertion_point(field_get:game.Update.end_turn)
  return end_turn_;
}
inline void Update::set_end_turn(bool value) {
  set_has_end_turn();
  end_turn_ = value;
  // @@protoc_insertion_point(field_set:game.Update.end_turn)
}

// optional .game.Update.GameWinState game_win_state = 4 [default = IN_PROGRESS];
inline bool Update::has_game_win_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Update::set_has_game_win_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Update::clear_has_game_win_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Update::clear_game_win_state() {
  game_win_state_ = 0;
  clear_has_game_win_state();
}
inline ::game::Update_GameWinState Update::game_win_state() const {
  // @@protoc_insertion_point(field_get:game.Update.game_win_state)
  return static_cast< ::game::Update_GameWinState >(game_win_state_);
}
inline void Update::set_game_win_state(::game::Update_GameWinState value) {
  assert(::game::Update_GameWinState_IsValid(value));
  set_has_game_win_state();
  game_win_state_ = value;
  // @@protoc_insertion_point(field_set:game.Update.game_win_state)
}

// optional string winning_team_uuid = 5;
inline bool Update::has_winning_team_uuid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Update::set_has_winning_team_uuid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Update::clear_has_winning_team_uuid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Update::clear_winning_team_uuid() {
  if (winning_team_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    winning_team_uuid_->clear();
  }
  clear_has_winning_team_uuid();
}
inline const ::std::string& Update::winning_team_uuid() const {
  // @@protoc_insertion_point(field_get:game.Update.winning_team_uuid)
  return *winning_team_uuid_;
}
inline void Update::set_winning_team_uuid(const ::std::string& value) {
  set_has_winning_team_uuid();
  if (winning_team_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    winning_team_uuid_ = new ::std::string;
  }
  winning_team_uuid_->assign(value);
  // @@protoc_insertion_point(field_set:game.Update.winning_team_uuid)
}
inline void Update::set_winning_team_uuid(const char* value) {
  set_has_winning_team_uuid();
  if (winning_team_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    winning_team_uuid_ = new ::std::string;
  }
  winning_team_uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:game.Update.winning_team_uuid)
}
inline void Update::set_winning_team_uuid(const char* value, size_t size) {
  set_has_winning_team_uuid();
  if (winning_team_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    winning_team_uuid_ = new ::std::string;
  }
  winning_team_uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:game.Update.winning_team_uuid)
}
inline ::std::string* Update::mutable_winning_team_uuid() {
  set_has_winning_team_uuid();
  if (winning_team_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    winning_team_uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:game.Update.winning_team_uuid)
  return winning_team_uuid_;
}
inline ::std::string* Update::release_winning_team_uuid() {
  clear_has_winning_team_uuid();
  if (winning_team_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = winning_team_uuid_;
    winning_team_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Update::set_allocated_winning_team_uuid(::std::string* winning_team_uuid) {
  if (winning_team_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete winning_team_uuid_;
  }
  if (winning_team_uuid) {
    set_has_winning_team_uuid();
    winning_team_uuid_ = winning_team_uuid;
  } else {
    clear_has_winning_team_uuid();
    winning_team_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:game.Update.winning_team_uuid)
}

// optional string fail_reason = 6;
inline bool Update::has_fail_reason() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Update::set_has_fail_reason() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Update::clear_has_fail_reason() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Update::clear_fail_reason() {
  if (fail_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_reason_->clear();
  }
  clear_has_fail_reason();
}
inline const ::std::string& Update::fail_reason() const {
  // @@protoc_insertion_point(field_get:game.Update.fail_reason)
  return *fail_reason_;
}
inline void Update::set_fail_reason(const ::std::string& value) {
  set_has_fail_reason();
  if (fail_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_reason_ = new ::std::string;
  }
  fail_reason_->assign(value);
  // @@protoc_insertion_point(field_set:game.Update.fail_reason)
}
inline void Update::set_fail_reason(const char* value) {
  set_has_fail_reason();
  if (fail_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_reason_ = new ::std::string;
  }
  fail_reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:game.Update.fail_reason)
}
inline void Update::set_fail_reason(const char* value, size_t size) {
  set_has_fail_reason();
  if (fail_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_reason_ = new ::std::string;
  }
  fail_reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:game.Update.fail_reason)
}
inline ::std::string* Update::mutable_fail_reason() {
  set_has_fail_reason();
  if (fail_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fail_reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:game.Update.fail_reason)
  return fail_reason_;
}
inline ::std::string* Update::release_fail_reason() {
  clear_has_fail_reason();
  if (fail_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fail_reason_;
    fail_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Update::set_allocated_fail_reason(::std::string* fail_reason) {
  if (fail_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fail_reason_;
  }
  if (fail_reason) {
    set_has_fail_reason();
    fail_reason_ = fail_reason;
  } else {
    clear_has_fail_reason();
    fail_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:game.Update.fail_reason)
}

// repeated .game.Update.Unit units = 7;
inline int Update::units_size() const {
  return units_.size();
}
inline void Update::clear_units() {
  units_.Clear();
}
inline const ::game::Update_Unit& Update::units(int index) const {
  // @@protoc_insertion_point(field_get:game.Update.units)
  return units_.Get(index);
}
inline ::game::Update_Unit* Update::mutable_units(int index) {
  // @@protoc_insertion_point(field_mutable:game.Update.units)
  return units_.Mutable(index);
}
inline ::game::Update_Unit* Update::add_units() {
  // @@protoc_insertion_point(field_add:game.Update.units)
  return units_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game::Update_Unit >&
Update::units() const {
  // @@protoc_insertion_point(field_list:game.Update.units)
  return units_;
}
inline ::google::protobuf::RepeatedPtrField< ::game::Update_Unit >*
Update::mutable_units() {
  // @@protoc_insertion_point(field_mutable_list:game.Update.units)
  return &units_;
}

// repeated .game.Update.Player player = 8;
inline int Update::player_size() const {
  return player_.size();
}
inline void Update::clear_player() {
  player_.Clear();
}
inline const ::game::Update_Player& Update::player(int index) const {
  // @@protoc_insertion_point(field_get:game.Update.player)
  return player_.Get(index);
}
inline ::game::Update_Player* Update::mutable_player(int index) {
  // @@protoc_insertion_point(field_mutable:game.Update.player)
  return player_.Mutable(index);
}
inline ::game::Update_Player* Update::add_player() {
  // @@protoc_insertion_point(field_add:game.Update.player)
  return player_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game::Update_Player >&
Update::player() const {
  // @@protoc_insertion_point(field_list:game.Update.player)
  return player_;
}
inline ::google::protobuf::RepeatedPtrField< ::game::Update_Player >*
Update::mutable_player() {
  // @@protoc_insertion_point(field_mutable_list:game.Update.player)
  return &player_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::game::Update_Unit_MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game::Update_Unit_MessageType>() {
  return ::game::Update_Unit_MessageType_descriptor();
}
template <> struct is_proto_enum< ::game::Update_Player_Action> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game::Update_Player_Action>() {
  return ::game::Update_Player_Action_descriptor();
}
template <> struct is_proto_enum< ::game::Update_GameWinState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game::Update_GameWinState>() {
  return ::game::Update_GameWinState_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_5fformat_2eproto__INCLUDED
